Token: SEPARATOR, Lexeme: $$
Token: SEPARATOR, Lexeme: $$
Token: KEYWORD, Lexeme: integer
	Production: <Qualifier> -> integer | boolean
Token: IDENTIFIER, Lexeme: value
Token: SEPARATOR, Lexeme: ,
Token: IDENTIFIER, Lexeme: counter
Token: SEPARATOR, Lexeme: ,
Token: IDENTIFIER, Lexeme: result
	Production: <IDs> -> <Identifier> | <Identifier>, <IDs>
	Production: <IDs> -> <Identifier> | <Identifier>, <IDs>
	Production: <IDs> -> <Identifier> | <Identifier>, <IDs>
	Production: <Declaration> -> <Qualifier> <IDs>
Token: SEPARATOR, Lexeme: ;
Token: KEYWORD, Lexeme: boolean
	Production: <Qualifier> -> integer | boolean
Token: IDENTIFIER, Lexeme: done
	Production: <IDs> -> <Identifier> | <Identifier>, <IDs>
	Production: <Declaration> -> <Qualifier> <IDs>
Token: SEPARATOR, Lexeme: ;
	Production: <Declaration List> -> <Declaration> ; | <Declaration> ; <Declaration List>
	Production: <Declaration List> -> <Declaration> ; | <Declaration> ; <Declaration List>
	Production: <Opt Declaration List> -> <Declaration List> | <Empty>
Token: SEPARATOR, Lexeme: $$
Token: KEYWORD, Lexeme: scan
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: value
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: ;
	Production: <Scan> -> scan ( <IDs> ) ;
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: IDENTIFIER, Lexeme: done
Token: OPERATOR, Lexeme: =
Token: KEYWORD, Lexeme: false
Token: SEPARATOR, Lexeme: ;
	Production: <Assign> -> <Identifier> = <Expression> ;
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: KEYWORD, Lexeme: if
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: value
Token: OPERATOR, Lexeme: >
	Production: <Relop> -> == | != | > | < | <= | >=
Token: INTEGER, Lexeme: 0
	Production: <Condition> -> <Expression> <Relop> <Expression>
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: {
Token: IDENTIFIER, Lexeme: result
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: value
Token: OPERATOR, Lexeme: *
Token: INTEGER, Lexeme: 2
Token: SEPARATOR, Lexeme: ;
	Production: <Assign> -> <Identifier> = <Expression> ;
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: KEYWORD, Lexeme: print
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: result
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: ;
	Production: <Print> -> print ( <Expression> ) ;
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
Token: SEPARATOR, Lexeme: }
	Production: <Compound> -> { <Statement List> }
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: KEYWORD, Lexeme: else
Token: SEPARATOR, Lexeme: {
Token: IDENTIFIER, Lexeme: result
Token: OPERATOR, Lexeme: =
Token: INTEGER, Lexeme: 0
Token: SEPARATOR, Lexeme: ;
	Production: <Assign> -> <Identifier> = <Expression> ;
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: KEYWORD, Lexeme: print
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: result
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: ;
	Production: <Print> -> print ( <Expression> ) ;
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
Token: SEPARATOR, Lexeme: }
	Production: <Compound> -> { <Statement List> }
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: KEYWORD, Lexeme: endif
	Production: <If> -> if ( <Condition> ) <Statement> endif | if ( <Condition> ) <Statement> else <Statement> endif
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: IDENTIFIER, Lexeme: counter
Token: OPERATOR, Lexeme: =
Token: INTEGER, Lexeme: 1
Token: SEPARATOR, Lexeme: ;
	Production: <Assign> -> <Identifier> = <Expression> ;
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: KEYWORD, Lexeme: while
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: counter
Token: OPERATOR, Lexeme: <=
	Production: <Relop> -> == | != | > | < | <= | >=
Token: IDENTIFIER, Lexeme: value
	Production: <Condition> -> <Expression> <Relop> <Expression>
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: {
Token: KEYWORD, Lexeme: print
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: counter
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: ;
	Production: <Print> -> print ( <Expression> ) ;
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: IDENTIFIER, Lexeme: counter
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: counter
Token: OPERATOR, Lexeme: +
Token: INTEGER, Lexeme: 1
Token: SEPARATOR, Lexeme: ;
	Production: <Assign> -> <Identifier> = <Expression> ;
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: KEYWORD, Lexeme: if
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: counter
Token: OPERATOR, Lexeme: ==
	Production: <Relop> -> == | != | > | < | <= | >=
Token: INTEGER, Lexeme: 3
	Production: <Condition> -> <Expression> <Relop> <Expression>
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: {
Token: IDENTIFIER, Lexeme: done
Token: OPERATOR, Lexeme: =
Token: KEYWORD, Lexeme: true
Token: SEPARATOR, Lexeme: ;
	Production: <Assign> -> <Identifier> = <Expression> ;
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
Token: SEPARATOR, Lexeme: }
	Production: <Compound> -> { <Statement List> }
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: KEYWORD, Lexeme: endif
	Production: <If> -> if ( <Condition> ) <Statement> endif | if ( <Condition> ) <Statement> else <Statement> endif
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
Token: SEPARATOR, Lexeme: }
	Production: <Compound> -> { <Statement List> }
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: KEYWORD, Lexeme: endwhile
	Production: <While> -> while ( <Condition> ) <Statement> endwhile
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Token: KEYWORD, Lexeme: print
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: done
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: ;
	Production: <Print> -> print ( <Expression> ) ;
	Production: <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
	Production: <Statement List> -> <Statement> | <Statement> <Statement List>
Token: SEPARATOR, Lexeme: $$
	Production: <Rat25S> -> $$ $$ <Opt Declaration List> $$ <Statement List> $$
Parsing completed successfully!
